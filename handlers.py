import time
from aiogram import types
import logging

class Handlers:
    def __init__(self, dp, db_manager, keyboards, request_interval=1):
        self.dp = dp
        self.db_manager = db_manager
        self.keyboards = keyboards
        self.REQUEST_INTERVAL = request_interval
        self.user_last_request_time = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.register_message_handler(self.send_welcome, commands=['start', 'help'])
        self.dp.register_message_handler(self.handle_loan, lambda message: message.text == "üìã –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º")
        self.dp.register_message_handler(self.handle_refinance, lambda message: message.text == "‚úÇ –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º")
        self.dp.register_message_handler(self.handle_problem, lambda message: message.text == "‚úè –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")
        self.dp.register_message_handler(self.handle_contact, content_types=types.ContentType.CONTACT)

    async def check_request_interval(self, message: types.Message):
        user_id = message.from_user.id
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if user_id in self.user_last_request_time:
            last_request_time = self.user_last_request_time[user_id]
            if current_time - last_request_time < self.REQUEST_INTERVAL:
                await message.reply("–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É.")
                return False

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.user_last_request_time[user_id] = current_time
        return True

    async def send_welcome(self, message: types.Message):
        if not await self.check_request_interval(message):
            return

        welcome_text = (
            "–Ø ‚Äî –±–æ—Ç –î–µ–Ω—å–≥–∞. –ü–æ–º–æ–≥—É:\n"
            "1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–π–º\n"
            "2Ô∏è‚É£ –†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–π–º\n"
            "3Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n"
            "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
        await message.reply(welcome_text, reply_markup=self.keyboards.get_main_keyboard())

    async def handle_loan(self, message: types.Message):
        if not await self.check_request_interval(message):
            return

        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º")

    async def handle_refinance(self, message: types.Message):
        if not await self.check_request_interval(message):
            return

        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º")

    async def handle_problem(self, message: types.Message):
        if not await self.check_request_interval(message):
            return

        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")

    async def handle_contact(self, message: types.Message):
        if not await self.check_request_interval(message):
            return

        contact = message.contact
        phone_number = contact.phone_number
        user_id = contact.user_id
        first_name = contact.first_name
        last_name = contact.last_name

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(
            f"User ID: {user_id}, First Name: {first_name}, Last Name: {last_name}, Phone Number: {phone_number}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db_manager.save_contact(user_id, first_name, last_name, phone_number)

        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
