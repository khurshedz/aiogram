import time
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ContentType
import logging
import functools


class Form(StatesGroup):
    loan_choice = State()
    refinance_choice = State()
    problem_choice = State()
    online_application = State()
    offline_application = State()
    personal_loan = State()
    mortgage = State()
    consumer_loan = State()
    date_choice = State()
    success = State()
    contact = State()


def check_interval(func):
    @functools.wraps(func)
    async def wrapper(self, message, *args, **kwargs):
                return await func(self, message, *args, **kwargs)

    return wrapper


class Handlers:
    def __init__(self, dp, db_manager, keyboards, request_interval=1):
        self.dp = dp
        self.db_manager = db_manager
        self.keyboards = keyboards
        self.REQUEST_INTERVAL = request_interval
        self.user_last_request_time = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.register_message_handler(self.send_welcome, commands=['start', 'help'])
        self.dp.register_message_handler(self.handle_loan, lambda message: message.text == "üìã –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º",
                                         state='*')
        self.dp.register_message_handler(self.handle_refinance,
                                         lambda message: message.text == "‚úÇ –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º", state='*')
        self.dp.register_message_handler(self.handle_problem,
                                         lambda message: message.text == "‚úè –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å", state='*')
        self.dp.register_message_handler(self.handle_contact, content_types=ContentType.CONTACT, state='*')

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.register_message_handler(self.loan_choice, state=Form.loan_choice)
        # self.dp.register_message_handler(self.refinance_choice, state=Form.refinance_choice)
        # self.dp.register_message_handler(self.problem_choice, state=Form.problem_choice)
        # self.dp.register_message_handler(self.online_application, state=Form.online_application)
        # self.dp.register_message_handler(self.offline_application, state=Form.offline_application)
        # self.dp.register_message_handler(self.personal_loan, state=Form.personal_loan)
        # self.dp.register_message_handler(self.mortgage, state=Form.mortgage)
        # self.dp.register_message_handler(self.consumer_loan, state=Form.consumer_loan)
        # self.dp.register_message_handler(self.date_choice, state=Form.date_choice)
        # self.dp.register_message_handler(self.success, state=Form.success)

    async def check_request_interval(self, message: Message):
        user_id = message.from_user.id
        current_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if user_id in self.user_last_request_time:
            last_request_time = self.user_last_request_time[user_id]
            if current_time - last_request_time < self.REQUEST_INTERVAL:
                await message.reply("–í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É.")
                return False

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.user_last_request_time[user_id] = current_time
        return True

    @check_interval
    async def send_welcome(self, message: Message):
        
        welcome_text = (
            "–Ø ‚Äî –±–æ—Ç –î–µ–Ω—å–≥–∞. –ü–æ–º–æ–≥—É:\n"
            "1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–π–º\n"
            "2Ô∏è‚É£ –†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–π–º\n"
            "3Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n"
        )
        await message.reply(welcome_text, reply_markup=self.keyboards.get_main_keyboard())

    @check_interval
    async def handle_loan(self, message: Message):
        await Form.loan_choice.set()
        await message.reply("–ö–∞–∫–æ–π –≤–∏–¥ –∑–∞–π–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=self.get_loan_keyboard())

    @check_interval
    async def handle_refinance(self, message: Message):
        await Form.refinance_choice.set()
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º",) # reply_markup=self.get_refinance_keyboard())

    @check_interval
    async def handle_problem(self, message: Message):
        await Form.problem_choice.set()
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")

    @check_interval
    async def handle_contact(self, message: Message):
        
        contact = message.contact
        phone_number = contact.phone_number
        user_id = contact.user_id
        first_name = contact.first_name
        last_name = contact.last_name

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(
            f"User ID: {user_id}, First Name: {first_name}, Last Name: {last_name}, Phone Number: {phone_number}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db_manager.save_contact(user_id, first_name, last_name, phone_number)

        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")

    @check_interval
    async def loan_choice(self, message: Message, state: FSMContext):
        if message.text == '–û–Ω–ª–∞–π–Ω':
            await Form.online_application.set()
            await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–Ω–ª–∞–π–Ω-–∑–∞—è–≤–∫—É. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
                                reply_markup=self.get_online_application_keyboard())
        elif message.text == '–û—Ñ–ª–∞–π–Ω':
            await Form.offline_application.set()
            await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ñ–ª–∞–π–Ω-–∑–∞—è–≤–∫—É. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?",
                                reply_markup=self.get_offline_application_keyboard())
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    @check_interval
    async def get_loan_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('–û–Ω–ª–∞–π–Ω'))
        keyboard.add(KeyboardButton('–û—Ñ–ª–∞–π–Ω'))
        return keyboard

    @check_interval
    async def get_online_application_keyboard(self):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É'))
        keyboard.add(KeyboardButton('–ù–∞–∑–∞–¥'))
        return keyboard

    @check_interval
    async def get_offline_application_keyboard(self, message: Message):
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'))
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –û—Ñ—Ñ–ª–∞–π–Ω")