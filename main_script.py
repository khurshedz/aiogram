import logging
import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import config  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏


class BotHandler:
    def __init__(self):
        self.bot = Bot(token=config.API_TOKEN)
        self.dp = Dispatcher(self.bot)
        self.dp.middleware.setup(LoggingMiddleware())

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.button_loan = KeyboardButton('üìã –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º')
        self.button_refinance = KeyboardButton('‚úÇ –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º')
        self.button_problem = KeyboardButton('‚úè –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å')
        self.button_contact = KeyboardButton('üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)
        self.keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(self.button_loan, self.button_refinance,
                                                                      self.button_problem, self.button_contact)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.register_message_handler(self.send_welcome, commands=['start', 'help'])
        self.dp.register_message_handler(self.handle_loan, lambda message: message.text == "üìã –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º")
        self.dp.register_message_handler(self.handle_refinance,
                                         lambda message: message.text == "‚úÇ –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º")
        self.dp.register_message_handler(self.handle_problem,
                                         lambda message: message.text == "‚úè –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")
        self.dp.register_message_handler(self.handle_contact, content_types=types.ContentType.CONTACT)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.loop = asyncio.get_event_loop()
        self.loop.run_until_complete(self.init_db())

    async def init_db(self):
        self.pool = await asyncpg.create_pool(
            user=config.POSTGRES_USER,
            password=config.POSTGRES_PASSWORD,
            database=config.POSTGRES_DB,
            host=config.POSTGRES_HOST,
            port=config.POSTGRES_PORT
        )

    async def send_welcome(self, message: types.Message):
        welcome_text = (
            "–Ø ‚Äî –±–æ—Ç –î–µ–Ω—å–≥–∞. –ü–æ–º–æ–≥—É:\n"
            "1Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–π–º\n"
            "2Ô∏è‚É£ –†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–π–º\n"
            "3Ô∏è‚É£ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω—É–∂–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n"
            "üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        )
        await message.reply(welcome_text, reply_markup=self.keyboard)

    async def handle_loan(self, message: types.Message):
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –•–æ—á—É –≤–∑—è—Ç—å –∑–∞–π–º")

    async def handle_refinance(self, message: types.Message):
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –•–æ—á—É —Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–π–º")

    async def handle_problem(self, message: types.Message):
        await message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å")

    async def handle_contact(self, message: types.Message):
        contact = message.contact
        phone_number = contact.phone_number
        user_id = contact.user_id
        first_name = contact.first_name
        last_name = contact.last_name

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.info(
            f"User ID: {user_id}, First Name: {first_name}, Last Name: {last_name}, Phone Number: {phone_number}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with self.pool.acquire() as connection:
            await connection.execute('''
                INSERT INTO contacts (user_id, first_name, last_name, phone_number) VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET phone_number = EXCLUDED.phone_number
            ''', user_id, first_name, last_name, phone_number)

        await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")

    def run(self):
        executor.start_polling(self.dp, skip_updates=True)


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("error.log"),
            logging.StreamHandler()
        ]
    )

    bot_handler = BotHandler()
    bot_handler.run()
